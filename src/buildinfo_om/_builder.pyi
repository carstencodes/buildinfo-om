#
#
# SPDX-Identifier: Apache 2.0 OR MIT
#
# Copyright (c) 2024 Carsten Igel.
#
# This file is part of pdm-bump
# (see https://github.com/carstencodes/pdm-bump).
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#  == OR ==
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#



"""
   File stubs for runtime generated types: 
     * AffectedIssueBuilder
     * AgentBuilder
     * ArtifactBuilder
     * BuildAgentBuilder
     * BuildInfoBuilder
     * DependencyBuilder
     * IssuesBuilder
     * ModuleBuilder
     * TrackerBuilder
     * VCSBuilder
"""


from typing import Any, Self
from ._model import (
    AffectedIssue,
    Agent,
    Artifact,
    BuildAgent,
    BuildInfo,
    Dependency,
    Issues,
    Module,
    Tracker,
)
from ._vcs import VCS



class AffectedIssueBuilder:
    def build(self) -> AffectedIssue: ...
    @staticmethod
    def from_instance(instance: AffectedIssue) -> AffectedIssueBuilder: ...
    def with_aggregated(self, value: bool) -> Self: ...
    def with_key(self, value: str) -> Self: ...
    def with_summary(self, value: str) -> Self: ...
    def with_url(self, value: str) -> Self: ...


class AgentBuilder:
    def build(self) -> Agent: ...
    @staticmethod
    def from_instance(instance: Agent) -> AgentBuilder: ...
    def with_name(self, value: str) -> Self: ...
    def with_version(self, value: str) -> Self: ...


class ArtifactBuilder:
    def build(self) -> Artifact: ...
    @staticmethod
    def from_instance(instance: Artifact) -> ArtifactBuilder: ...
    def with_hash_composite_value(self, hash_value: str) -> Self: ...
    def with_hash_value(self, algorithm: str, hash_value: str) -> Self: ...
    def with_md5(self, value: str) -> Self: ...
    def with_name(self, value: str) -> Self: ...
    def with_path(self, value: str) -> Self: ...
    def with_sha1(self, value: str) -> Self: ...
    def with_sha256(self, value: str) -> Self: ...
    def with_type(self, value: str) -> Self: ...


class BuildAgentBuilder:
    def build(self) -> BuildAgent: ...
    @staticmethod
    def from_instance(instance: BuildAgent) -> BuildAgentBuilder: ...
    def with_name(self, value: str) -> Self: ...
    def with_version(self, value: str) -> Self: ...


class BuildInfoBuilder:
    def build(self) -> BuildInfo: ...
    def collect_env(self, **additional_properties: Any) -> Self: ...
    def collect_env_without_keys(self, *keys: str, **additional_properties: Any) -> Self: ...
    @staticmethod
    def from_instance(instance: BuildInfo) -> BuildInfoBuilder: ...
    def with_agent(self, builder: AgentBuilder) -> Self: ...
    def with_build_agent(self, builder: BuildAgentBuilder) -> Self: ...
    def with_duration_millis(self, value: int) -> Self: ...
    def with_issues(self, builder: IssuesBuilder) -> Self: ...
    def with_modules(self, *builders: ModuleBuilder) -> Self: ...
    def with_name(self, value: str) -> Self: ...
    def with_number(self, value: str) -> Self: ...
    def with_principal(self, value: str) -> Self: ...
    def with_properties(self, **values: str) -> Self: ...
    def with_started(self, value: str) -> Self: ...
    def with_type(self, value: str) -> Self: ...
    def with_url(self, value: str) -> Self: ...
    def with_vcs(self, *builders: VCSBuilder) -> Self: ...
    def with_version(self, value: str) -> Self: ...


class DependencyBuilder:
    def build(self) -> Dependency: ...
    @staticmethod
    def from_instance(instance: Dependency) -> DependencyBuilder: ...
    def with_hash_composite_value(self, hash_value: str) -> Self: ...
    def with_hash_value(self, algorithm: str, hash_value: str) -> Self: ...
    def with_id(self, value: str) -> Self: ...
    def with_md5(self, value: str) -> Self: ...
    def with_requested_by(self, *values: tuple) -> Self: ...
    def with_scopes(self, *values: str) -> Self: ...
    def with_sha1(self, value: str) -> Self: ...
    def with_sha256(self, value: str) -> Self: ...
    def with_type(self, value: str) -> Self: ...


class IssuesBuilder:
    def build(self) -> Issues: ...
    @staticmethod
    def from_instance(instance: Issues) -> IssuesBuilder: ...
    def with_affected_issues(self, *builders: AffectedIssueBuilder) -> Self: ...
    def with_aggregate_build_issues(self, value: bool) -> Self: ...
    def with_aggregation_build_status(self, value: str) -> Self: ...
    def with_tracker(self, builder: TrackerBuilder) -> Self: ...


class ModuleBuilder:
    def build(self) -> Module: ...
    @staticmethod
    def from_instance(instance: Module) -> ModuleBuilder: ...
    def with_artifacts(self, *builders: ArtifactBuilder) -> Self: ...
    def with_dependencies(self, *builders: DependencyBuilder) -> Self: ...
    def with_id(self, value: str) -> Self: ...
    def with_properties(self, **values: str) -> Self: ...
    def with_type(self, value: str) -> Self: ...


class TrackerBuilder:
    def build(self) -> Tracker: ...
    @staticmethod
    def from_instance(instance: Tracker) -> TrackerBuilder: ...
    def with_name(self, value: str) -> Self: ...
    def with_version(self, value: str) -> Self: ...


class VCSBuilder:
    def build(self) -> VCS: ...
    @staticmethod
    def from_instance(instance: VCS) -> VCSBuilder: ...
    def with_branch(self, value: str) -> Self: ...
    def with_message(self, value: str) -> Self: ...
    def with_revision(self, value: str) -> Self: ...
    def with_url(self, value: str) -> Self: ...




